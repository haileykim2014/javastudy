6주차 과제
자바의 상속에 대해 학습

목차
상속 (Inheritance)
자바 상속의 특징
super 키워드와 super() 메소드
메소드 오버라이딩
메소드 디스패치 (Method Dispatch)
스태틱 메소드 디스패치 (Static Method Dispatch)
다이나믹 메소드 디스패치 (Dynamic Method Dispatch)
더블 디스패치 (Double Dispatch)
추상 클래스
final 키워드
Object 클래스
상속 (Inheritance)
부모가 자식에게 물려주는 행위 자바는 부모 클래스의 멤버를 자식 클래스에게 상속 가능

부모 클래스 = 상위 클래스
자식 클래스 = 하위 클래스 or 파생 클래스
inheritance

⏫Top

자바 상속의 특징
1. extends 키워드를 사용하여 상속
class 자식클래스명 extends 부모클래스 {
  // 필드
  // 생성자
  // 메소드
}
2. 다중 상속 불가능
자바는 다중 상속을 허용하지 않기 때문에 여러 개의 부모 클래스 상속 불가능

class SportsCar extends Car, Vehicle {
  . . .
}
다중 상속 시 컴파일 에러 발생
Class cannot extend multiple classes
3. 부모 메소드를 자식 클래스에서 재정의(오버라이딩) 가능
부모 클래스의 모든 메소드가 자식 클래스에 맞게 설계될 수는 없기 때문에 자바는 자식 클래스에서 부모 클래스의 기능을 수정해서 사용할 수 있는 오버라이딩(Overriding) 기능 제공

4. 부모의 private 접근 제한을 갖는 멤버는 상속 불가능
private 제한자는 오로지 선언된 클래스 내부에서만 접근 가능하므로 외부에서 사용할 수 있게 하는 상속은 불가능 만약 상속이 필요할 경우, 다른 접근 제한자(public, protected) 사용

5. final 클래스는 상속할 수 없고, final 메소드는 오버라이딩 불가능
final 키워드는 해당 선언이 최종 상태이고, 결코 수정될 수 없음을 의미하여 상속과 오버라이딩이 불가능

6. 자바의 모든 클래스는 Object 클래스의 자식/자손 클래스
자바의 최상위 클래스는 Object 클래스 클래스 선언 시 다른 클래스를 상속받지 않으면 암시적으로 java.lang.Object 클래스를 상속

⏫Top

super 키워드와 super() 메소드
super 키워드
자식이 부모 메소드를 호출해야하는 경우 super 키워드 사용

부모 객체를 참조하고 있기 때문에 부모에 직접 접근 가능

super.부모메소드();
public class Airplane {
  public void land() { }
  public void fly() {
    System.out.println("일반 비행");
  }
  public void takeOff() { }
}

public class SupersonicAirplane extends Airplane {
  public static final int NORMAL = 1;
  public static final int SUPERSONIC = 2;

  public int flyMode = NORMAL;

  @Override
  public void fly() {
    if (flyMode = SUPERSONIC) {
      System.out.println("초음속 비행");
    } else {
      // 부모 메소드 호출
      super.fly();
    }
  }
}
super() 메소드
부모의 기본 생성자를 호출하는 역할 (반드시 자식 생성자의 첫 줄에 위치)

자바는 자식 객체를 생성하면 부모 객체가 먼저 생성되고 자식 객체는 그 다음에 생성되는 구조

public class CellPhone { . . . }
public class IPhone extends CellPhone { . . . }
IPhone iPhone = new IPhone();
inheritance2

CellPhone을 상속받는 자식 클래스 IPhone
IPhone을 생성했을 때 내부 메모리 구조를 보면 부모 객체가 생성된 것 확인 가능
객체를 생성하려면 생성자를 호출해야 하는데 부모 클래스의 생성자를 호출한 곳은? 자식 생성자의 맨 첫 줄
자식 클래스의 생성자를 명시적으로 선언하지 않았다면 컴파일러가 자동으로 다음과 같은 기본 생성자 생성

public IPhone() {
  super();
}
첫 줄의 super();를 통해 다음과 같이 부모 클래스의 생성자가 호출되는 것

public CellPhone() { }

자식 클래스에서 super();를 명시적으로 작성하지 않아도 컴파일러가 자동으로 추가

public class People { }
public class Student extends People {
  public int studentNo;

  public Student(int studentNo) {
    //super();가 숨겨져 있는 것
    this.studentNo = studentNo;
  }
}
부모 클래스에 기본 생성자가 없고 매개변수를 갖는 생성자만 있다면 자식 클래스에서 반드시 super(매개값,..);를 직접 명시

public class People {
  public String name;
  public String ssn;

  public People(String name, String ssn) {
    this.name = name;
    this.ssn = ssn;
  }
}
public class Student extends People {
  public int studentNo;

  public Student(String name, String ssn, int studentNo) {
    super(name, ssn);
    this.studentNo = studentNo;
  }
}
부모 클래스 People에는 기본 생성자가 없기 때문에 자식 클래스 Student에서 반드시 매개값을 갖는 super(name, ssn); 호출
super(name, ssn);를 작성하지 않은 경우 컴파일 에러 발생
There is no default constructor available in 'People'
⏫Top

메소드 오버라이딩
메소드를 오버라이딩하면 자식 객체의 메소드 호출 시 부모 기능은 숨겨지고 자식이 재정의한 기능 실행

class Parent {
  void method1() {}

  void method2() {}
}

class Child extends Parent {
  @Override
  void method2() {}

  void method3() {}
}
class Example {
  public static void main(String[] args) {
    Child child = new Child();

    child.method1();  // 상속 받은 부모 메소드 호출
    child.method2();  // 재정의한 자식 메소드 호출
    child.method3();  // 자식 메소드 호출
  }
}
오버라이딩 할 때 주의할 점
부모의 메소드와 동일한 메소드 시그니처(메소드 이름, 매개변수 리스트) 사용

@Override 어노테이션을 사용하면 부모 메소드를 정확히 오버라이딩 했는지 확인 가능
어노테이션 사용하지 않을 경우 실수로 오타 발생 시 새로운 메소드를 정의하는 것
사용하는 IDE에 따라 오버라이딩 메소드 자동 생성 기능 지원
부모 메소드의 접근 제한자보다 강한 제한 사용 불가능

부모 : public => 자식 : public 가능
부모 : default => 자식 : public, protected, default 가능
새로운 예외 추가 불가능
